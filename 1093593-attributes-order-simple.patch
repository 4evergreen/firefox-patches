# HG changeset patch
# User Grisha Pushkov <grisha@push.org.ru>
# Parent  489332006384610e3322739f66729448da0e98d9
Bug 1093593 - Order of attributes in markup view depends on input order; r=pbro

diff --git a/devtools/client/markupview/markup-view.js b/devtools/client/markupview/markup-view.js
--- a/devtools/client/markupview/markup-view.js
+++ b/devtools/client/markupview/markup-view.js
@@ -2634,17 +2634,17 @@ ElementEditor.prototype = {
 
       if (canSimplyShowEditor) {
         // Element already exists and doesn't need to be recreated.
         // Just show it (it's hidden by default due to the template).
         el.style.removeProperty("display");
       } else {
         // Create a new editor, because the value of an existing attribute
         // has changed.
-        let attribute = this._createAttribute(attr);
+        let attribute = this._createAttribute(attr, el);
         attribute.style.removeProperty("display");
 
         // Temporarily flash the attribute to highlight the change.
         // But not if this is the first time the editor instance has
         // been created.
         if (this.initialized) {
           this.flashAttribute(attr.name);
         }
diff --git a/devtools/client/markupview/test/browser.ini b/devtools/client/markupview/test/browser.ini
--- a/devtools/client/markupview/test/browser.ini
+++ b/devtools/client/markupview/test/browser.ini
@@ -111,13 +111,14 @@ skip-if = e10s # Bug 1036409 - The last 
 [browser_markupview_tag_edit_05.js]
 [browser_markupview_tag_edit_06.js]
 [browser_markupview_tag_edit_07.js]
 [browser_markupview_tag_edit_08.js]
 [browser_markupview_tag_edit_09.js]
 [browser_markupview_tag_edit_10.js]
 [browser_markupview_tag_edit_11.js]
 [browser_markupview_tag_edit_12.js]
+[browser_markupview_tag_edit_13-other.js]
 [browser_markupview_textcontent_edit_01.js]
 [browser_markupview_toggle_01.js]
 [browser_markupview_toggle_02.js]
 [browser_markupview_toggle_03.js]
 [browser_markupview_update-on-navigtion.js]
diff --git a/devtools/client/markupview/test/browser_markupview_keybindings_01.js b/devtools/client/markupview/test/browser_markupview_keybindings_01.js
--- a/devtools/client/markupview/test/browser_markupview_keybindings_01.js
+++ b/devtools/client/markupview/test/browser_markupview_keybindings_01.js
@@ -1,17 +1,17 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Tests tabbing through attributes on a node
 
-const TEST_URL = "data:text/html;charset=utf8,<div a b c d e id='test'></div>";
+const TEST_URL = "data:text/html;charset=utf8,<div id='test' a b c d e></div>";
 
 add_task(function*() {
   let {inspector} = yield addTab(TEST_URL).then(openInspector);
 
   info("Focusing the tag editor of the test element");
   let {editor} = yield getContainerForSelector("div", inspector);
   editor.tag.focus();
 
@@ -20,28 +20,28 @@ add_task(function*() {
   checkFocusedAttribute("id");
 
   info("Hit enter to turn the attribute to edit mode");
   EventUtils.sendKey("return", inspector.panelWin);
   checkFocusedAttribute("id", true);
 
   // Check the order of the other attributes in the DOM to the check they appear
   // correctly in the markup-view
-  let attributes = [...getNode("div").attributes].filter(attr => attr.name !== "id");
+  let attributes = (yield getAttributesFromEditor("div", inspector)).slice(1);
 
   info("Tabbing forward through attributes in edit mode");
-  for (let {name} of attributes) {
+  for (let attribute of attributes) {
     collapseSelectionAndTab(inspector);
-    checkFocusedAttribute(name, true);
+    checkFocusedAttribute(attribute, true);
   }
 
   info("Tabbing backward through attributes in edit mode");
 
   // Just reverse the attributes other than id and remove the first one since
   // it's already focused now.
   let reverseAttributes = attributes.reverse();
   reverseAttributes.shift();
 
-  for (let {name} of reverseAttributes) {
+  for (let attribute of reverseAttributes) {
     collapseSelectionAndShiftTab(inspector);
-    checkFocusedAttribute(name, true);
+    checkFocusedAttribute(attribute, true);
   }
 });
diff --git a/devtools/client/markupview/test/browser_markupview_tag_edit_12.js b/devtools/client/markupview/test/browser_markupview_tag_edit_12.js
--- a/devtools/client/markupview/test/browser_markupview_tag_edit_12.js
+++ b/devtools/client/markupview/test/browser_markupview_tag_edit_12.js
@@ -2,84 +2,62 @@
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
 // Tests that focus position is correct when tabbing through and editing
 // attributes.
 
-const TEST_URL = "data:text/html;charset=utf8,<div id='attr' c='3' b='2' a='1'></div><div id='delattr' last='1' tobeinvalid='2'></div>";
+const TEST_URL = "data:text/html;charset=utf8,<div id='attr' a='1' b='2' c='3'></div><div id='delattr' tobeinvalid='1' last='2'></div>";
 
 add_task(function*() {
   let {inspector} = yield addTab(TEST_URL).then(openInspector);
 
   yield testAttributeEditing(inspector);
   yield testAttributeDeletion(inspector);
 });
 
 function* testAttributeEditing(inspector) {
   info("Testing focus position after attribute editing");
 
-  // Modifying attributes reorders them in the internal representation to move
-  // the modified attribute to the end. breadcrumbs.js will update attributes
-  // to match original order if you selectNode before modifying attributes.
-  // So, hacky workaround for consistency with manual testing.
-  // Should be removed after Bug 1093593.
-  yield selectNode("#attr", inspector);
-
   info("Setting the first non-id attribute in edit mode");
   yield activateFirstAttribute("#attr", inspector); // focuses id
   collapseSelectionAndTab(inspector); // focuses the first attr after id
 
-  // Detect the attributes order from the DOM, instead of assuming an order in
-  // the test, because the NamedNodeMap returned by element.attributes doesn't
-  // guaranty any specific order.
-  // Filter out the id attribute as the markup-view places it first anyway.
-  let attrs = getNodeAttributesOtherThanId("#attr");
+  let attrs = yield getAttributesFromEditor("#attr", inspector);
 
   info("Editing this attribute, keeping the same name, and tabbing to the next");
-  yield editAttributeAndTab(attrs[0].name + '="99"', inspector);
-  checkFocusedAttribute(attrs[1].name, true);
+  yield editAttributeAndTab(attrs[1] + '="99"', inspector);
+  checkFocusedAttribute(attrs[2], true);
 
   info("Editing the new focused attribute, keeping the name, and tabbing to the previous");
-  yield editAttributeAndTab(attrs[1].name + '="99"', inspector, true);
-  checkFocusedAttribute(attrs[0].name, true);
+  yield editAttributeAndTab(attrs[2] + '="99"', inspector, true);
+  checkFocusedAttribute(attrs[1], true);
 
   info("Editing attribute name, changes attribute order");
   yield editAttributeAndTab("d='4'", inspector);
   checkFocusedAttribute("id", true);
 
   // Escape of the currently focused field for the next test
   EventUtils.sendKey("escape", inspector.panelWin);
 }
 
 function* testAttributeDeletion(inspector) {
   info("Testing focus position after attribute deletion");
 
-  // Modifying attributes reorders them in the internal representation to move
-  // the modified attribute to the end. breadcrumbs.js will update attributes
-  // to match original order if you selectNode before modifying attributes.
-  // So, hacky workaround for consistency with manual testing.
-  // Should be removed after Bug 1093593.
-  yield selectNode("#delattr", inspector);
-
   info("Setting the first non-id attribute in edit mode");
   yield activateFirstAttribute("#delattr", inspector); // focuses id
   collapseSelectionAndTab(inspector); // focuses the first attr after id
 
-  // Detect the attributes order from the DOM, instead of assuming an order in
-  // the test, because the NamedNodeMap returned by element.attributes doesn't
-  // guaranty any specific order.
-  // Filter out the id attribute as the markup-view places it first anyway.
-  let attrs = getNodeAttributesOtherThanId("#delattr");
+  let attrs = yield getAttributesFromEditor("#delattr", inspector);
 
   info("Entering an invalid attribute to delete the attribute");
   yield editAttributeAndTab('"', inspector);
-  checkFocusedAttribute(attrs[1].name, true);
+  checkFocusedAttribute(attrs[2], true);
 
   info("Deleting the last attribute");
   yield editAttributeAndTab(" ", inspector);
 
   // Check we're on the newattr element
   let focusedAttr = Services.focus.focusedElement;
   ok(focusedAttr.classList.contains("styleinspector-propertyeditor"), "in newattr");
   is(focusedAttr.tagName, "input", "newattr is active");
@@ -104,12 +82,8 @@ function* editAttributeAndTab(newValue, 
 function* activateFirstAttribute(container, inspector) {
   let {editor} = yield getContainerForSelector(container, inspector);
   editor.tag.focus();
 
   // Go to "id" attribute and trigger edit mode.
   EventUtils.sendKey("tab", inspector.panelWin);
   EventUtils.sendKey("return", inspector.panelWin);
 }
-
-function getNodeAttributesOtherThanId(selector) {
-  return [...getNode(selector).attributes].filter(attr => attr.name !== "id");
-}
diff --git a/devtools/client/markupview/test/browser_markupview_tag_edit_13-other.js b/devtools/client/markupview/test/browser_markupview_tag_edit_13-other.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/markupview/test/browser_markupview_tag_edit_13-other.js
@@ -0,0 +1,38 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+ http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Tests that doesn't fit into any specific category.
+
+const TEST_URL = "data:text/html;charset=utf8,<div a b id='order' c class></div>";
+
+add_task(function*() {
+  let {inspector, testActor} = yield addTab(TEST_URL).then(openInspector);
+
+  yield testOriginalAttributesOrder(inspector);
+  yield testOrderAfterAttributeChange(inspector, testActor);
+});
+
+function* testOriginalAttributesOrder(inspector) {
+  info("Testing order of attributes on initial node render");
+
+  let attributes = yield getAttributesFromEditor("#order", inspector);
+  ok(isEqual(attributes, ["id", "class", "a", "b", "c"]), "ordered correctly");
+}
+
+function* testOrderAfterAttributeChange(inspector, testActor) {
+  info("Testing order of attributes after attribute is change by setAttribute");
+
+  let container = getContainerForSelector("#order", inspector);
+  yield testActor.setAttribute("#order", "a", "changed");
+
+  let attributes = yield getAttributesFromEditor("#order", inspector);
+  ok(isEqual(attributes, ["id", "class", "a", "b", "c"]),
+    "order isn't changed");
+}
+
+function isEqual(a, b) {
+  return a.toString() === b.toString();
+}
diff --git a/devtools/client/markupview/test/head.js b/devtools/client/markupview/test/head.js
--- a/devtools/client/markupview/test/head.js
+++ b/devtools/client/markupview/test/head.js
@@ -18,16 +18,20 @@ waitForExplicitFinish();
 
 // If a test times out we want to see the complete log and not just the last few
 // lines.
 SimpleTest.requestCompleteLog();
 
 // Uncomment this pref to dump all devtools emitted events to the console.
 // Services.prefs.setBoolPref("devtools.dump.emit", true);
 
+// Import helpers registering the test-actor in remote targets
+var testDir = gTestPath.substr(0, gTestPath.lastIndexOf("/"));
+Services.scriptloader.loadSubScript(testDir + "../../../shared/test/test-actor-registry.js", this);
+
 // Set the testing flag on DevToolsUtils and reset it when the test ends
 DevToolsUtils.testing = true;
 registerCleanupFunction(() => DevToolsUtils.testing = false);
 
 // Clear preferences that may be set during the course of tests.
 registerCleanupFunction(() => {
   Services.prefs.clearUserPref("devtools.inspector.htmlPanelOpen");
   Services.prefs.clearUserPref("devtools.inspector.sidebarOpen");
@@ -132,17 +136,21 @@ function openToolbox(toolId) {
  * @return a promise that resolves when the inspector is ready
  */
 function openInspector() {
   return openToolbox("inspector").then(({toolbox}) => {
     let inspector = toolbox.getCurrentPanel();
     let eventId = "inspector-updated";
     return inspector.once("inspector-updated").then(() => {
       info("The inspector panel is active and ready");
-      return {toolbox: toolbox, inspector: inspector};
+      return registerTestActor(toolbox.target.client);
+    }).then(() => {
+      return getTestActor(toolbox);
+    }).then((testActor) => {
+      return {toolbox, inspector, testActor};
     });
   });
 }
 
 /**
  * Wait for a content -> chrome message on the message manager (the window
  * messagemanager is used).
  * @param {String} name The message name
@@ -651,16 +659,32 @@ function checkFocusedAttribute(attrName,
   let focusedAttr = Services.focus.focusedElement;
   is(focusedAttr ? focusedAttr.parentNode.dataset.attr : undefined,
     attrName, attrName + " attribute editor is currently focused.");
   is(focusedAttr ? focusedAttr.tagName : undefined,
     editMode ? "input": "span",
     editMode ? attrName + " is in edit mode" : attrName + " is not in edit mode");
 }
 
+/**
+ * Get attributes for node as how they are represented in editor.
+ *
+ * @param  {String} selector
+ * @param  {InspectorPanel} inspector
+ * @return {Promise}
+ *         A promise that resolves with an array of attribute names
+ *         (e.g. ["id", "class", "href"])
+ */
+var getAttributesFromEditor = Task.async(function*(selector, inspector) {
+  let nodeList = (yield getContainerForSelector(selector, inspector))
+    .tagLine.querySelectorAll("[data-attr]");
+
+  return [...nodeList].map(node => node.getAttribute("data-attr"));
+});
+
 // The expand all operation of the markup-view calls itself recursively and
 // there's not one event we can wait for to know when it's done
 // so use this helper function to wait until all recursive children updates are done.
 function* waitForMultipleChildrenUpdates(inspector) {
   // As long as child updates are queued up while we wait for an update already
   // wait again
   if (inspector.markup._queuedChildUpdates &&
       inspector.markup._queuedChildUpdates.size) {
diff --git a/devtools/client/shared/test/test-actor.js b/devtools/client/shared/test/test-actor.js
--- a/devtools/client/shared/test/test-actor.js
+++ b/devtools/client/shared/test/test-actor.js
@@ -1,15 +1,15 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
-// A helper actor for brower/devtools/inspector tests.
+// A helper actor for inspector and markupview tests.
 
 var { Cc, Ci, Cu, Cr } = require("chrome");
 const {getRect, getElementFromPoint, getAdjustedQuads} = require("devtools/shared/layout/utils");
 const promise = require("promise");
 const {Task} = Cu.import("resource://gre/modules/Task.jsm", {});
 var DOMUtils = Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
 var loader = Cc["@mozilla.org/moz/jssubscript-loader;1"]
             .getService(Ci.mozIJSSubScriptLoader);
@@ -408,17 +408,17 @@ var TestActor = exports.TestActor = prot
     response: {
       value: RetVal("json")
     }
   }),
 
   /**
    * Set a JS property on a DOM Node.
    * @param {String} selector The node selector
-   * @param {String} attribute The attribute name
+   * @param {String} property The property name
    * @param {String} value The attribute value
    */
   setProperty: protocol.method(function (selector, property, value) {
     let node = this._querySelector(selector);
     node[property] = value;
   }, {
     request: {
       selector: Arg(0, "string"),
@@ -426,33 +426,51 @@ var TestActor = exports.TestActor = prot
       value: Arg(2, "string")
     },
     response: {}
   }),
 
   /**
    * Get a JS property on a DOM Node.
    * @param {String} selector The node selector
-   * @param {String} attribute The attribute name
+   * @param {String} property The property name
    * @return {String} value The attribute value
    */
   getProperty: protocol.method(function (selector, property) {
     let node = this._querySelector(selector);
     return node[property];
   }, {
     request: {
       selector: Arg(0, "string"),
       property: Arg(1, "string")
     },
     response: {
       value: RetVal("string")
     }
   }),
 
   /**
+   * Set an attribute on a DOM Node.
+   * @param {String} selector The node selector
+   * @param {String} attribute The attribute name
+   * @param {String} value The attribute value
+   */
+  setAttribute: protocol.method(function (selector, attribute, value) {
+    let node = this._querySelector(selector);
+    node.setAttribute(attribute, value);
+  }, {
+    request: {
+      selector: Arg(0, "string"),
+      property: Arg(1, "string"),
+      value: Arg(2, "string")
+    },
+    response: {}
+  }),
+
+  /**
    * Reload an iframe and wait for its load event.
    * @param {String} selector The node selector
    */
   reloadFrame: protocol.method(function (selector) {
     let node = this._querySelector(selector);
 
     let deferred = promise.defer();
 
diff --git a/devtools/client/webconsole/test/browser_webconsole_output_dom_elements_02.js b/devtools/client/webconsole/test/browser_webconsole_output_dom_elements_02.js
--- a/devtools/client/webconsole/test/browser_webconsole_output_dom_elements_02.js
+++ b/devtools/client/webconsole/test/browser_webconsole_output_dom_elements_02.js
@@ -22,41 +22,41 @@ const TEST_DATA = [
     attrs: [{name: "some-attribute", value: "some-value"}]
   },
   {
     input: "testBodyNode()",
     output: '<body id="body-id" class="body-class">',
     tagName: "BODY",
     attrs: [
       {
-        name: "id", value: "body-id"
+        name: "class", value: "body-class"
       },
       {
-        name: "class", value: "body-class"
+        name: "id", value: "body-id"
       }
     ]
   },
   {
     input: "testNodeInIframe()",
     output: "<p>",
     tagName: "P",
     attrs: []
   },
   {
     input: "testDocumentElement()",
     output: '<html lang="en-US" dir="ltr">',
     tagName: "HTML",
     attrs: [
       {
+        name: "dir",
+        value: "ltr"
+      },
+      {
         name: "lang",
         value: "en-US"
-      },
-      {
-        name: "dir",
-        value: "ltr"
       }
     ]
   }
 ];
 
 function test() {
   Task.spawn(function*() {
     let {tab} = yield loadTab(TEST_URI);
diff --git a/devtools/server/actors/inspector.js b/devtools/server/actors/inspector.js
--- a/devtools/server/actors/inspector.js
+++ b/devtools/server/actors/inspector.js
@@ -417,17 +417,21 @@ var NodeActor = exports.NodeActor = prot
     }
     return false;
   },
 
   writeAttrs: function() {
     if (!this.rawNode.attributes) {
       return undefined;
     }
-    return [...this.rawNode.attributes].map(attr => {
+
+    // The NamedNodeMap implementation in Firefox (returned by
+    // node.attributes) gives attributes in the reverse order compared
+    // to the source file when iterated. So reverse the list here.
+    return [...this.rawNode.attributes].reverse().map(attr => {
       return {namespace: attr.namespace, name: attr.name, value: attr.value };
     });
   },
 
   writePseudoClassLocks: function() {
     if (this.rawNode.nodeType !== Ci.nsIDOMNode.ELEMENT_NODE) {
       return undefined;
     }
